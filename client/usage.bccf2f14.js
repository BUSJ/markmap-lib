import{S as a,i as n,s as e,k as t,c as o,b as m,d as r,f as i,n as l,o as p,h as s}from"./client.5544b9bd.js";import{l as d}from"./markmap.b34e89dc.js";function h(a){let n;return{c(){n=t("main")},l(a){n=o(a,"MAIN",{}),m(n).forEach(r)},m(e,t){i(e,n,t),n.innerHTML='<h2 id="usage">Usage</h2>\n<p><img src="https://img.shields.io/npm/v/markmap-lib.svg" alt="NPM">\n<img src="https://img.shields.io/npm/l/markmap-lib.svg" alt="License">\n<img src="https://img.shields.io/npm/dt/markmap-lib.svg" alt="Downloads"></p>\n<h3 id="command-line">Command-line</h3>\n<h4 id="installation">Installation</h4>\n<p>Install globally:</p>\n<pre><code class="language-bash">$ yarn global add markmap-lib\n# or\n$ npm install markmap-lib -g</code></pre>\n<p>or use with <code>npx</code>:</p>\n<pre><code class="language-bash">$ npx markmap-lib</code></pre>\n<h4 id="commands">Commands</h4>\n<pre><code>Usage: markmap [options] &lt;input&gt;\n\nCreate a markmap from a Markdown input file\n\nOptions:\n  -V, --version          output the version number\n  -o, --output &lt;output&gt;  specify filename of the output HTML\n  --enable-mathjax       enable MathJax support\n  --enable-prism         enable PrismJS support\n  --no-open              do not open the output file after generation\n  -h, --help             display help for command</code></pre><p>Suppose we have a Markdown file named <code>note.md</code>.</p>\n<p>Run the following command to get an interactive mindmap:</p>\n<pre><code class="language-bash">$ markmap note.md\n\n# without global installation\n$ npx markmap-lib note.md</code></pre>\n<p>Then we get <code>note.html</code> in the same directory, and hopefully it will be open in your default browser.</p>\n<h3 id="api">API</h3>\n<h4 id="installation-1">Installation</h4>\n<pre><code class="language-bash">$ yarn add markmap-lib\n# or\n$ npm install markmap-lib</code></pre>\n<h4 id="transform">Transform</h4>\n<p>Transform Markdown to markmap data:</p>\n<pre><code class="language-js">import { transform } from &#39;markmap-lib/dist/transform&#39;;\n\nconst data = transform(markdown);</code></pre>\n<p>Now we get the data for rendering in <code>data</code>.</p>\n<h4 id="render">Render</h4>\n<p>Render a markmap from transformed data:</p>\n<p>Create an SVG element with explicit width and height:</p>\n<pre><code class="language-html">&lt;svg id=&quot;markmap&quot; style=&quot;width: 800px; height: 800px&quot;&gt;&lt;/svg&gt;</code></pre>\n<p>Render a markmap to the SVG element:</p>\n<pre><code class="language-js">import { markmap } from &#39;markmap-lib/dist/view&#39;;\n\nmarkmap(&#39;#markmap&#39;, data);\n\n// or pass an SVG element directly\nconst svgEl = document.querySelector(&#39;#markmap&#39;);\nmarkmap(svgEl, data);</code></pre>\n<h3 id="plugins">Plugins</h3>\n<ul>\n<li>MathJax</li>\n<li>PrismJS</li>\n</ul>\n<h4 id="command-line-1">Command-line</h4>\n<p>To enable plugins in command line, just add the related option, for example:</p>\n<pre><code class="language-bash">$ markmap note.md --enable-mathjax --enable-prism</code></pre>\n<h4 id="api-1">API</h4>\n<p><code>loadPlugins</code> loads necessary CSS and JavaScript files.</p>\n<pre><code class="language-js">import { markmap, loadPlugins } from &#39;markmap-lib/dist/view&#39;;\n\nloadPlugins([\n  &#39;mathJax&#39;,\n  &#39;prism&#39;,\n])\n.then(() =&gt; {\n  markmap(&#39;#markmap&#39;, data);\n});</code></pre>\n<h2 id="related">Related</h2>\n<ul>\n<li>Use with Vim / Neovim: <a href="https://github.com/gera2ld/coc-markmap">coc-markmap</a></li>\n<li>Use with GatsbyJS: <a href="https://github.com/gera2ld/gatsby-remark-markmap">gatsby-remark-markmap</a></li>\n</ul>\n',a[1](n)},p:l,i:l,o:l,d(e){e&&r(n),a[1](null)}}}function c(a,n,e){let t;return p(async()=>{await d,window.Prism.highlightAllUnder(t)}),[t,function(a){s[a?"unshift":"push"](()=>{e(0,t=a)})}]}export default class extends a{constructor(a){super(),n(this,a,c,h,e,{})}}
